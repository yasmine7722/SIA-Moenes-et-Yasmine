#include <stdio.h>
#include <stdlib.h>
#include <webots/robot.h>
#include <webots/motor.h>
#include <webots/distance_sensor.h>

#define NUM_SENSORS 9
#define OBSTACLE_THRESHOLD 15  // Adjust based on your observations
#define AVERAGE_WINDOW 5       // Number of readings to average
#define TARGET_DISTANCE 0.2    // Desired distance from the obstacle
#define MAX_SPEED 19.1         // Maximum speed of the robot

static WbDeviceTag sensors[NUM_SENSORS], left_motor, right_motor;
static int time_step = 0;
static double max_speed = MAX_SPEED; // Adjust as needed

static double average_sensor_value = 0;
static int average_count = 0;

static void initialize() {
  wb_robot_init();
  time_step = wb_robot_get_basic_time_step();

  char sensor_name[5];
  for (int i = 0; i < NUM_SENSORS; i++) {
    sprintf(sensor_name, "ds%d", i);
    sensors[i] = wb_robot_get_device(sensor_name);
    wb_distance_sensor_enable(sensors[i], time_step);
  }

  left_motor = wb_robot_get_device("left wheel motor");
  right_motor = wb_robot_get_device("right wheel motor");
  wb_motor_set_position(left_motor, INFINITY);
  wb_motor_set_position(right_motor, INFINITY);
  wb_motor_set_velocity(left_motor, max_speed); // Start moving forward
  wb_motor_set_velocity(right_motor, max_speed); // Start moving forward
}

int main() {
  initialize();

  while (wb_robot_step(time_step) != -1) {
    double front_sensor_value = wb_distance_sensor_get_value(sensors[3]); // Reading from sensor ds3
    
    // Update running average
    average_sensor_value = ((average_sensor_value * average_count) + front_sensor_value) / (average_count + 1);
    average_count = (average_count < AVERAGE_WINDOW) ? average_count + 1 : AVERAGE_WINDOW;

    printf("Average front sensor value: %lf\n", average_sensor_value);

    // Adjust motor speed based on the distance to the obstacle
    double speed_ratio = average_sensor_value / TARGET_DISTANCE;
    double left_speed = max_speed * speed_ratio;
    double right_speed = max_speed;

    // Cap the speeds to avoid going too fast
    left_speed = (left_speed > max_speed) ? max_speed : left_speed;
    right_speed = (right_speed > max_speed) ? max_speed : right_speed;

    // Set motor speeds
    wb_motor_set_velocity(left_motor, left_speed);
    wb_motor_set_velocity(right_motor, right_speed);
  }

  return 0;
}
