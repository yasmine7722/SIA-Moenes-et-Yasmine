#include <stdio.h>
#include <webots/robot.h>
#include <webots/motor.h>
#include <webots/distance_sensor.h>

#define NUM_SENSORS 9
#define OBSTACLE_THRESHOLD 15  // Adjust based on your observations
#define AVERAGE_WINDOW 5       // Number of readings to average

static WbDeviceTag sensors[NUM_SENSORS], left_motor, right_motor;
static int time_step = 0;
static double max_speed = 19.1; // Adjust as needed

static double average_sensor_value = 0;
static int average_count = 0;

// Weights for the behaviors
static double weight_avoidance = 0.7;
static double weight_forward = 0.3;

static void initialize() {
  wb_robot_init();
  time_step = wb_robot_get_basic_time_step();

  char sensor_name[5];
  for (int i = 0; i < NUM_SENSORS; i++) {
    sprintf(sensor_name, "ds%d", i);
    sensors[i] = wb_robot_get_device(sensor_name);
    wb_distance_sensor_enable(sensors[i], time_step);
  }

  left_motor = wb_robot_get_device("left wheel motor");
  right_motor = wb_robot_get_device("right wheel motor");
  wb_motor_set_position(left_motor, INFINITY);
  wb_motor_set_position(right_motor, INFINITY);
  wb_motor_set_velocity(left_motor, max_speed); // Start moving forward
  wb_motor_set_velocity(right_motor, max_speed); // Start moving forward
}

double avoidance_behavior() {
 
  double motor_command = max_speed;


  double front_sensor_value = wb_distance_sensor_get_value(sensors[3]);

  // If an obstacle is detected in front, adjust the motor command to avoid it
  if (front_sensor_value > OBSTACLE_THRESHOLD) {
    
    motor_command = -max_speed;  // Turn right
  }

  return motor_command;
}


double forward_behavior() {
  // Return a constant motor command for forward motion
  return max_speed;
}


int main() {
  initialize();

  while (wb_robot_step(time_step) != -1) {
    double front_sensor_value = wb_distance_sensor_get_value(sensors[3]); // Reading from sensor ds3
    
    // Update running average
    average_sensor_value = ((average_sensor_value * average_count) + front_sensor_value) / (average_count + 1);
    average_count = (average_count < AVERAGE_WINDOW) ? average_count + 1 : AVERAGE_WINDOW;

    printf("Average front sensor value: %lf\n", average_sensor_value);

    // Calculate the contributions of each behavior
    double avoidance_command = avoidance_behavior();
    double forward_command = forward_behavior();

    // Calculate the final command by summing the weighted contributions
    double motor_command[2] = {0, 0};
    motor_command[0] = weight_avoidance * avoidance_command + weight_forward * forward_command;
    motor_command[1] = weight_avoidance * avoidance_command + weight_forward * forward_command;

    // Apply the final command to the motors
    wb_motor_set_velocity(left_motor, motor_command[0]);
    wb_motor_set_velocity(right_motor, motor_command[1]);
  }

  return 0;
}
